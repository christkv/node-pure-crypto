var debug = require('sys').debug,
  inspect = require('sys').inspect,
  util = require('utils'),
  Long = require('long').Long;

const BlockSize = 8;

var Gost28147 = exports.Gost28147 = function(key, sbox) {  
  if(sbox != null && sbox.length != Gost28147.Sbox_Default.length) throw "invalid S-box passed to GOST28147 init";
  // Default SBOX
  this.S = sbox != null ? sbox.slice(0) : Gost28147.Sbox_Default;
  // Create the working key
  this.workingKey = this.generateWorkingKey(key);
}

Gost28147.prototype.generateWorkingKey = function(key) {
  if(key.length != 32) throw "Key length invalid. Key needs to be 32 byte - 256 bit!!!";
  var k = new Array(8);
  for(var i = 0; i != 8; i++) {
    k[i] = Long.fromNumber(util.decodeUInt32(key.slice(i*4, i*4 + 4).reverse(), 0)).getLowBitsUnsigned();
  }
  return k;
}

Gost28147.prototype.getBlockSize = function() {
  return BlockSize;
}

Gost28147.prototype.encrypt = function(src, index) {
  index = index == null ? 0 : index;
  // return this.encryptBlock(src.slice(index, index + BlockSize));
  return GOST28147Func(true, this.S, this.workingKey, src.slice(index, index + BlockSize));
}

var GOST28147Func = function(forEncryption, S, workingKey, src) {
  var N1, N2, tmp;  //tmp -> for saving N1
  N1 = util.decodeUInt32(src.slice(0, 4).reverse(), 0)
  N2 = util.decodeUInt32(src.slice(4, 8).reverse(), 0)

  if(forEncryption) {
    // 1-24 steps
    for(var k = 0; k < 3; k++) {
      for(var j = 0; j < 8; j++) {
        tmp = N1;
        N1 = N2 ^ GOST28147_mainStep(S, N1, workingKey[j]); // CM2
        N2 = tmp;
      }
    }
        
    // 25-31 steps
    for(var j = 7; j > 0; j--) {
      tmp = N1;
      N1 = N2 ^ GOST28147_mainStep(S, N1, workingKey[j]); // CM2
      N2 = tmp;
    }
  } else { //decrypt
    // 1-8 steps
    for(var j = 0; j < 8; j++) {
       tmp = N1;
       N1 = N2 ^ GOST28147_mainStep(S, N1, workingKey[j]); // CM2
       N2 = tmp;
    }
    
    //9-31 steps
    for(var k = 0; k < 3; k++) {
      for(var j = 7; j >= 0; j--) {
        if ((k == 2) && (j==0)) {
            break; // break 32 step
        }
        tmp = N1;
        N1 = N2 ^ GOST28147_mainStep(S, N1, workingKey[j]); // CM2
        N2 = tmp;
      }
    }
  }

  // 32 step (N1=N1)
  N2 = N2 ^ GOST28147_mainStep(S, N1, workingKey[0]);  

  // Map the output
  src[3] = (N1 >> 24) & 0xff;
  src[2] = (N1 >> 16) & 0xff;
  src[1] = (N1 >> 8) & 0xff;
	src[0] = N1 & 0xff;

  src[7] = (N2 >> 24) & 0xff;
  src[6] = (N2 >> 16) & 0xff;
  src[5] = (N2 >> 8) & 0xff;
	src[4] = N2 & 0xff;  
	return src;
}

var GOST28147_mainStep = function(S, n1, key) {
  var cm = (key + n1); // CM1  
  // S-box replacing
  var om = S[  0 + ((cm >> (0 * 4)) & 0xF)] << (0 * 4);
     om += S[ 16 + ((cm >> (1 * 4)) & 0xF)] << (1 * 4);
     om += S[ 32 + ((cm >> (2 * 4)) & 0xF)] << (2 * 4);
     om += S[ 48 + ((cm >> (3 * 4)) & 0xF)] << (3 * 4);
     om += S[ 64 + ((cm >> (4 * 4)) & 0xF)] << (4 * 4);
     om += S[ 80 + ((cm >> (5 * 4)) & 0xF)] << (5 * 4);
     om += S[ 96 + ((cm >> (6 * 4)) & 0xF)] << (6 * 4);
     om += S[112 + ((cm >> (7 * 4)) & 0xF)] << (7 * 4);
  // 11-leftshift
  return om << 11 | om >>> (32-11); 
}

Gost28147.prototype.decrypt = function(src, index) {
  index = index == null ? 0 : index;
  return GOST28147Func(false, this.S, this.workingKey, src.slice(index, index + BlockSize));
}

// these are the S-boxes given in Applied Cryptography 2nd Ed., p. 333
// This is default S-box!
Gost28147.Sbox_Default = [
    0x4,0xA,0x9,0x2,0xD,0x8,0x0,0xE,0x6,0xB,0x1,0xC,0x7,0xF,0x5,0x3,
    0xE,0xB,0x4,0xC,0x6,0xD,0xF,0xA,0x2,0x3,0x8,0x1,0x0,0x7,0x5,0x9,
    0x5,0x8,0x1,0xD,0xA,0x3,0x4,0x2,0xE,0xF,0xC,0x7,0x6,0x0,0x9,0xB,
    0x7,0xD,0xA,0x1,0x0,0x8,0x9,0xF,0xE,0x4,0x6,0xC,0xB,0x2,0x5,0x3,
    0x6,0xC,0x7,0x1,0x5,0xF,0xD,0x8,0x4,0xA,0x9,0xE,0x0,0x3,0xB,0x2,
    0x4,0xB,0xA,0x0,0x7,0x2,0x1,0xD,0x3,0x6,0x8,0x5,0x9,0xC,0xF,0xE,
    0xD,0xB,0x4,0x1,0x3,0xF,0x5,0x9,0x0,0xA,0xE,0x7,0x6,0x8,0x2,0xC,
    0x1,0xF,0xD,0x0,0x5,0x7,0xA,0x4,0x9,0x2,0x3,0xE,0x6,0xB,0x8,0xC
];

/*
 * class content S-box parameters for encrypting
 * getting from, see: http://tools.ietf.org/id/draft-popov-cryptopro-cpalgs-01.txt
 *                    http://tools.ietf.org/id/draft-popov-cryptopro-cpalgs-02.txt
 */
Gost28147.ESbox_Test = [
     0x4,0x2,0xF,0x5,0x9,0x1,0x0,0x8,0xE,0x3,0xB,0xC,0xD,0x7,0xA,0x6,
     0xC,0x9,0xF,0xE,0x8,0x1,0x3,0xA,0x2,0x7,0x4,0xD,0x6,0x0,0xB,0x5,
     0xD,0x8,0xE,0xC,0x7,0x3,0x9,0xA,0x1,0x5,0x2,0x4,0x6,0xF,0x0,0xB,
     0xE,0x9,0xB,0x2,0x5,0xF,0x7,0x1,0x0,0xD,0xC,0x6,0xA,0x4,0x3,0x8,
     0x3,0xE,0x5,0x9,0x6,0x8,0x0,0xD,0xA,0xB,0x7,0xC,0x2,0x1,0xF,0x4,
     0x8,0xF,0x6,0xB,0x1,0x9,0xC,0x5,0xD,0x3,0x7,0xA,0x0,0xE,0x2,0x4,
     0x9,0xB,0xC,0x0,0x3,0x6,0x7,0x5,0x4,0x8,0xE,0xF,0x1,0xA,0x2,0xD,
     0xC,0x6,0x5,0x2,0xB,0x0,0x9,0xD,0x3,0xE,0x7,0xA,0xF,0x4,0x1,0x8
];

Gost28147.ESbox_A = [
     0x9,0x6,0x3,0x2,0x8,0xB,0x1,0x7,0xA,0x4,0xE,0xF,0xC,0x0,0xD,0x5,
     0x3,0x7,0xE,0x9,0x8,0xA,0xF,0x0,0x5,0x2,0x6,0xC,0xB,0x4,0xD,0x1,
     0xE,0x4,0x6,0x2,0xB,0x3,0xD,0x8,0xC,0xF,0x5,0xA,0x0,0x7,0x1,0x9,
     0xE,0x7,0xA,0xC,0xD,0x1,0x3,0x9,0x0,0x2,0xB,0x4,0xF,0x8,0x5,0x6,
     0xB,0x5,0x1,0x9,0x8,0xD,0xF,0x0,0xE,0x4,0x2,0x3,0xC,0x7,0xA,0x6,
     0x3,0xA,0xD,0xC,0x1,0x2,0x0,0xB,0x7,0x5,0x9,0x4,0x8,0xF,0xE,0x6,
     0x1,0xD,0x2,0x9,0x7,0xA,0x6,0x0,0x8,0xC,0x4,0x5,0xF,0x3,0xB,0xE,
     0xB,0xA,0xF,0x5,0x0,0xC,0xE,0x8,0x6,0x2,0x3,0x9,0x1,0x7,0xD,0x4
];

Gost28147.ESbox_B = [
     0x8,0x4,0xB,0x1,0x3,0x5,0x0,0x9,0x2,0xE,0xA,0xC,0xD,0x6,0x7,0xF,
     0x0,0x1,0x2,0xA,0x4,0xD,0x5,0xC,0x9,0x7,0x3,0xF,0xB,0x8,0x6,0xE,
     0xE,0xC,0x0,0xA,0x9,0x2,0xD,0xB,0x7,0x5,0x8,0xF,0x3,0x6,0x1,0x4,
     0x7,0x5,0x0,0xD,0xB,0x6,0x1,0x2,0x3,0xA,0xC,0xF,0x4,0xE,0x9,0x8,
     0x2,0x7,0xC,0xF,0x9,0x5,0xA,0xB,0x1,0x4,0x0,0xD,0x6,0x8,0xE,0x3,
     0x8,0x3,0x2,0x6,0x4,0xD,0xE,0xB,0xC,0x1,0x7,0xF,0xA,0x0,0x9,0x5,
     0x5,0x2,0xA,0xB,0x9,0x1,0xC,0x3,0x7,0x4,0xD,0x0,0x6,0xF,0x8,0xE,
     0x0,0x4,0xB,0xE,0x8,0x3,0x7,0x1,0xA,0x2,0x9,0x6,0xF,0xD,0x5,0xC
];

Gost28147.ESbox_C = [
     0x1,0xB,0xC,0x2,0x9,0xD,0x0,0xF,0x4,0x5,0x8,0xE,0xA,0x7,0x6,0x3,
     0x0,0x1,0x7,0xD,0xB,0x4,0x5,0x2,0x8,0xE,0xF,0xC,0x9,0xA,0x6,0x3,
     0x8,0x2,0x5,0x0,0x4,0x9,0xF,0xA,0x3,0x7,0xC,0xD,0x6,0xE,0x1,0xB,
     0x3,0x6,0x0,0x1,0x5,0xD,0xA,0x8,0xB,0x2,0x9,0x7,0xE,0xF,0xC,0x4,
     0x8,0xD,0xB,0x0,0x4,0x5,0x1,0x2,0x9,0x3,0xC,0xE,0x6,0xF,0xA,0x7,
     0xC,0x9,0xB,0x1,0x8,0xE,0x2,0x4,0x7,0x3,0x6,0x5,0xA,0x0,0xF,0xD,
     0xA,0x9,0x6,0x8,0xD,0xE,0x2,0x0,0xF,0x3,0x5,0xB,0x4,0x1,0xC,0x7,
     0x7,0x4,0x0,0x5,0xA,0x2,0xF,0xE,0xC,0x6,0x1,0xB,0xD,0x9,0x3,0x8
];

Gost28147.ESbox_D = [
     0xF,0xC,0x2,0xA,0x6,0x4,0x5,0x0,0x7,0x9,0xE,0xD,0x1,0xB,0x8,0x3,
     0xB,0x6,0x3,0x4,0xC,0xF,0xE,0x2,0x7,0xD,0x8,0x0,0x5,0xA,0x9,0x1,
     0x1,0xC,0xB,0x0,0xF,0xE,0x6,0x5,0xA,0xD,0x4,0x8,0x9,0x3,0x7,0x2,
     0x1,0x5,0xE,0xC,0xA,0x7,0x0,0xD,0x6,0x2,0xB,0x4,0x9,0x3,0xF,0x8,
     0x0,0xC,0x8,0x9,0xD,0x2,0xA,0xB,0x7,0x3,0x6,0x5,0x4,0xE,0xF,0x1,
     0x8,0x0,0xF,0x3,0x2,0x5,0xE,0xB,0x1,0xA,0x4,0x7,0xC,0x9,0xD,0x6,
     0x3,0x0,0x6,0xF,0x1,0xE,0x9,0x2,0xD,0x8,0xC,0x4,0xB,0xA,0x5,0x7,
     0x1,0xA,0x6,0x8,0xF,0xB,0x0,0x4,0xC,0x3,0x5,0x9,0x7,0xD,0x2,0xE
];

//S-box for digest
Gost28147.DSbox_Test = [
     0x4,0xA,0x9,0x2,0xD,0x8,0x0,0xE,0x6,0xB,0x1,0xC,0x7,0xF,0x5,0x3,
     0xE,0xB,0x4,0xC,0x6,0xD,0xF,0xA,0x2,0x3,0x8,0x1,0x0,0x7,0x5,0x9,
     0x5,0x8,0x1,0xD,0xA,0x3,0x4,0x2,0xE,0xF,0xC,0x7,0x6,0x0,0x9,0xB,
     0x7,0xD,0xA,0x1,0x0,0x8,0x9,0xF,0xE,0x4,0x6,0xC,0xB,0x2,0x5,0x3,
     0x6,0xC,0x7,0x1,0x5,0xF,0xD,0x8,0x4,0xA,0x9,0xE,0x0,0x3,0xB,0x2,
     0x4,0xB,0xA,0x0,0x7,0x2,0x1,0xD,0x3,0x6,0x8,0x5,0x9,0xC,0xF,0xE,
     0xD,0xB,0x4,0x1,0x3,0xF,0x5,0x9,0x0,0xA,0xE,0x7,0x6,0x8,0x2,0xC,
     0x1,0xF,0xD,0x0,0x5,0x7,0xA,0x4,0x9,0x2,0x3,0xE,0x6,0xB,0x8,0xC
];

Gost28147.DSbox_A = [
     0xA,0x4,0x5,0x6,0x8,0x1,0x3,0x7,0xD,0xC,0xE,0x0,0x9,0x2,0xB,0xF,
     0x5,0xF,0x4,0x0,0x2,0xD,0xB,0x9,0x1,0x7,0x6,0x3,0xC,0xE,0xA,0x8,
     0x7,0xF,0xC,0xE,0x9,0x4,0x1,0x0,0x3,0xB,0x5,0x2,0x6,0xA,0x8,0xD,
     0x4,0xA,0x7,0xC,0x0,0xF,0x2,0x8,0xE,0x1,0x6,0x5,0xD,0xB,0x9,0x3,
     0x7,0x6,0x4,0xB,0x9,0xC,0x2,0xA,0x1,0x8,0x0,0xE,0xF,0xD,0x3,0x5,
     0x7,0x6,0x2,0x4,0xD,0x9,0xF,0x0,0xA,0x1,0x5,0xB,0x8,0xE,0xC,0x3,
     0xD,0xE,0x4,0x1,0x7,0x0,0x5,0xA,0x3,0xC,0x8,0xF,0x6,0x2,0x9,0xB,
     0x1,0x3,0xA,0x9,0x5,0xB,0x4,0xF,0x8,0x6,0x7,0xE,0xD,0x0,0x2,0xC
];


